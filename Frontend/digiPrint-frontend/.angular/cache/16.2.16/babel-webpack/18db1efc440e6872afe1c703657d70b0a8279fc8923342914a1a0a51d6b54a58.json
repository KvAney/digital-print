{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.videos = [{\n      id: '1',\n      title: 'Politics 1',\n      description: '',\n      category: 'Politics',\n      thumbnailUrl: 'https://via.placeholder.com/150'\n    }, {\n      id: '2',\n      title: 'Entertainment 1',\n      description: '',\n      category: 'Entertainment',\n      thumbnailUrl: 'https://via.placeholder.com/150'\n    }, {\n      id: '3',\n      title: 'Sports 1',\n      description: '',\n      category: 'Sports',\n      thumbnailUrl: 'https://via.placeholder.com/150'\n    }, {\n      id: '4',\n      title: 'Politics 2',\n      description: '',\n      category: 'Politics',\n      thumbnailUrl: 'https://via.placeholder.com/150'\n    }, {\n      id: '5',\n      title: 'Entertainment 2',\n      description: '',\n      category: 'Entertainment',\n      thumbnailUrl: 'https://via.placeholder.com/150'\n    }];\n    this.baseUrl = 'http://127.0.0.1:5000'; // Adjust if running on a different port or deployed\n  }\n\n  getGroupedCategoryData() {\n    console.log(\"Gettinf data\");\n    return this.http.get('http://localhost:5000/getDetails').pipe(map(data => {\n      console.log('ðŸ“¦ Raw backend data:', data);\n      return data['response'];\n    }));\n    // return this.videos.reduce((acc, video) => {\n    //   acc[video.category] = acc[video.category] || [];\n    //   acc[video.category].push(video);\n    //   return acc;\n    // }, {} as { [category: string]: Video[] });\n  }\n\n  removeLike(videoId) {\n    return this.http.post(`${this.baseUrl}/api/removeLike`, {\n      videoId\n    });\n  }\n  static {\n    this.Éµfac = function DataService_Factory(t) {\n      return new (t || DataService)(i0.ÉµÉµinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: DataService,\n      factory: DataService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","DataService","constructor","http","videos","id","title","description","category","thumbnailUrl","baseUrl","getGroupedCategoryData","console","log","get","pipe","data","removeLike","videoId","post","i0","ÉµÉµinject","i1","HttpClient","factory","Éµfac","providedIn"],"sources":["G:\\Angulat\\DigitalPrint\\Frontend\\digiPrint-frontend\\src\\app\\services\\video.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Video } from '../models/video.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  private videos: Video[] = [\r\n    { id: '1', title: 'Politics 1', description: '', category: 'Politics', thumbnailUrl: 'https://via.placeholder.com/150' },\r\n    { id: '2', title: 'Entertainment 1', description: '', category: 'Entertainment', thumbnailUrl: 'https://via.placeholder.com/150' },\r\n    { id: '3', title: 'Sports 1', description: '', category: 'Sports', thumbnailUrl: 'https://via.placeholder.com/150' },\r\n    { id: '4', title: 'Politics 2', description: '', category: 'Politics', thumbnailUrl: 'https://via.placeholder.com/150' },\r\n    { id: '5', title: 'Entertainment 2', description: '', category: 'Entertainment', thumbnailUrl: 'https://via.placeholder.com/150' },\r\n  ];\r\n\r\n  private baseUrl = 'http://127.0.0.1:5000';  // Adjust if running on a different port or deployed\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n\r\n  getGroupedCategoryData(): Observable<{ [category: string]: Video[] }> {\r\n    console.log(\"Gettinf data\");\r\n     return this.http.get<{response:{[category: string]: Video[]}}>('http://localhost:5000/getDetails')\r\n     .pipe(map(data => {\r\n      console.log('ðŸ“¦ Raw backend data:', data);\r\n      return  (data as any)['response']}));\r\n      \r\n\r\n\r\n    // return this.videos.reduce((acc, video) => {\r\n    //   acc[video.category] = acc[video.category] || [];\r\n    //   acc[video.category].push(video);\r\n    //   return acc;\r\n    // }, {} as { [category: string]: Video[] });\r\n  } \r\n    removeLike(videoId: string): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/api/removeLike`, { videoId });\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVhB,KAAAC,MAAM,GAAY,CACxB;MAAEC,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,YAAY,EAAE;IAAiC,CAAE,EACxH;MAAEJ,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,iBAAiB;MAAEC,WAAW,EAAE,EAAE;MAAEC,QAAQ,EAAE,eAAe;MAAEC,YAAY,EAAE;IAAiC,CAAE,EAClI;MAAEJ,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,UAAU;MAAEC,WAAW,EAAE,EAAE;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,YAAY,EAAE;IAAiC,CAAE,EACpH;MAAEJ,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,YAAY;MAAEC,WAAW,EAAE,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,YAAY,EAAE;IAAiC,CAAE,EACxH;MAAEJ,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,iBAAiB;MAAEC,WAAW,EAAE,EAAE;MAAEC,QAAQ,EAAE,eAAe;MAAEC,YAAY,EAAE;IAAiC,CAAE,CACnI;IAEO,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAE;EAEL;;EAGvCC,sBAAsBA,CAAA;IACpBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC1B,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAA2C,kCAAkC,CAAC,CACjGC,IAAI,CAACf,GAAG,CAACgB,IAAI,IAAG;MAChBJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,IAAI,CAAC;MACzC,OAASA,IAAY,CAAC,UAAU,CAAC;IAAA,CAAC,CAAC,CAAC;IAItC;IACA;IACA;IACA;IACA;EACF;;EACEC,UAAUA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,GAAG,IAAI,CAACT,OAAO,iBAAiB,EAAE;MAAEQ;IAAO,CAAE,CAAC;EACtE;;;uBA/BWjB,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtB,WAAW;MAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}